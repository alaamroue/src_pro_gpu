/*
 * HIGH-PERFORMANCE INTEGRATED MODELLING SYSTEM (HiPIMS)
 * Copyright (C) 2023 Luke S. Smith, Qiuhua Liang.
 * This code is licensed under GPLv3. See LICENCE for more information.
 * This file has been modified by Alaa Mroue on 04.2023-12.2023.
 * See OriginalSourceCode.zip for changes. (Based on 1e62acf6b9b480e08646b232361b68c1827d91ae from https://github.com/lukeshope/hipims-ocl )
 */

 #define Cfacweir 2.95245

/*
 *  Calculate everything without using LDS caching
 */
__kernel REQD_WG_SIZE_FULL_TS
void ine_cacheDisabled ( 
			__constant	cl_double *  				dTimestep,					// Timestep
			__global	cl_double const * restrict	dBedElevation,				// Bed elevation
			__global	cl_double4 *  			pCellStateSrc,					// Current cell state data
			__global	cl_double4 *  			pCellStateDst,					// Current cell state data
			__global	cl_double const * restrict	dManning,					// Manning values
			__global	sUsePolini const * restrict	pUsePoleni,					// Switch to use Poleni
			__global	cl_double const * restrict	pOpt_zxmax,					// 	
			__global	cl_double const * restrict	pOpt_cx,					// 	
			__global	cl_double const * restrict	pOpt_zymax,					// 	
			__global	cl_double const * restrict	pOpt_cy						// 	
		)
{

	// Identify the cell we're reconstructing (no overlap)
	__private cl_long					lIdxX			= get_global_id(0);
	__private cl_long					lIdxY			= get_global_id(1);
	__private cl_ulong					ulIdx, ulIdxNeig;
	__private cl_uchar					ucDirection;
	
	ulIdx = getCellID(lIdxX, lIdxY);

	// Don't bother if we've gone beyond the domain bounds
	if ( lIdxX > DOMAIN_COLS - 1 || 
		 lIdxY > DOMAIN_ROWS - 1 || 
		 lIdxX < 0 || 
		 lIdxY < 0 ) 
		return;

	// TimeStep
	__private cl_double		dLclTimestep	= *dTimestep;
	// Change of water level
	__private cl_double		dDeltaFSL;
	// Bed elevations (opt_z)
	__private cl_double		dCellBedElev,dNeigBedElevN,dNeigBedElevE,dNeigBedElevS,dNeigBedElevW;
	// Manning coefficients
	__private cl_double		dManningCoef, pNeigManN, pNeigManE, pNeigManS,pNeigManW;
	// Water surface level (opt_s)
	__private cl_double4	pCellData,pNeigDataN,pNeigDataE,pNeigDataS,pNeigDataW;					// opt_s, opt_s_max, Qx, Qy
	// Discharges
	__private cl_double		dDischarge[4];															// Qn, Qe, Qs, Qw
	// Flags to check scheme to use (main scheme or polini)
	__private sUsePolini	pUsePoleniFlags;
	__private bool			usePoleniN, usePoleniE, usePoleniS, usePoleniW;
	__private cl_double		dOpt_zxmax,dOpt_zymax,dOpt_znxmax,dOpt_znymax;
	__private cl_double		dOpt_cx, dOpt_cy, dOpt_cnx,dOpt_cny;


	// Counter for dry values surrounding cell
	__private cl_uchar		ucDryCount		= 0;
	

	// Also don't bother if we've gone beyond the total simulation time
	// Alaa: Because of we need to alternate between them then we should set the dst to src
	// The host sends a sequence of (time ->  scheme...time -> scheme...time -> scheme ) (schme is scheme and bound)
	// When time is done the sequence will still run and thus it is possible we use an old value
	// Example:
	// Step 1: Time suggests 0.1     Scheme: Src: k dst: k*0.1
	// Step 1.5: Flip src and dst.   Now:    src: k*0.1  dst:k
	// Step 2: Time suggests 0.0     scheme: if scheme ignores then src: k*0.1 dst: k
	// Simulation finished but results is incorrect because dst is k but should be k*0.1 (Scheme should set dst = src)
	// Todo: Alaa: There should be a way to avoid this no? Maybe not flip on host when time is <= 0.0?
	if ( dLclTimestep <= 0.0 ){
		pCellStateDst[ ulIdx ] = pCellStateSrc[ ulIdx ];
		return;
	}

	// Load cell data
	dCellBedElev		= dBedElevation[ ulIdx ];
	pCellData			= pCellStateSrc[ ulIdx ];
	dManningCoef		= dManning[ ulIdx ];
	dOpt_zxmax			= pOpt_zxmax[ ulIdx ];
	dOpt_cx				= pOpt_cx	[ ulIdx ];
	dOpt_zymax			= pOpt_zymax[ ulIdx ];
	dOpt_cy				= pOpt_cy	[ ulIdx ];



	pUsePoleniFlags		= pUsePoleni[ ulIdx ];
	usePoleniN			= pUsePoleniFlags.usePoliniN;
	usePoleniE			= pUsePoleniFlags.usePoliniE;
	usePoleniS			= pUsePoleniFlags.usePoliniS;
	usePoleniW			= pUsePoleniFlags.usePoliniW;

	// Cell disabled?
	if ( dCellBedElev == -9999.0 )
	{
		pCellStateDst[ ulIdx ] = pCellData;
		return;
	}
	
	ucDirection = DOMAIN_DIR_N;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevN	= dBedElevation [ ulIdxNeig ];
	pNeigDataN		= pCellStateSrc	[ ulIdxNeig ];
	pNeigManN		= dManning [ ulIdxNeig ];
	
	ucDirection = DOMAIN_DIR_E;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevE	= dBedElevation [ ulIdxNeig ];
	pNeigDataE		= pCellStateSrc	[ ulIdxNeig ];
	pNeigManE		= dManning [ ulIdxNeig ];

	ucDirection = DOMAIN_DIR_W;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevW	= dBedElevation [ ulIdxNeig ];
	pNeigDataW		= pCellStateSrc	[ ulIdxNeig ];
	pNeigManW		= dManning [ ulIdxNeig ];
	dOpt_znxmax		= pOpt_zxmax[ ulIdxNeig ];
	dOpt_cnx		= pOpt_cx[ ulIdxNeig ];

	ucDirection = DOMAIN_DIR_S;
	ulIdxNeig = getNeighbourByIndices(lIdxX, lIdxY, ucDirection);
	dNeigBedElevS	= dBedElevation [ ulIdxNeig ];
	pNeigDataS		= pCellStateSrc	[ ulIdxNeig ];
	pNeigManS		= dManning [ ulIdxNeig ];
	dOpt_znymax		= pOpt_zymax[ ulIdxNeig ];
	dOpt_cny		= pOpt_cy[ ulIdxNeig ];

	if ( pCellData.x  - dCellBedElev  < VERY_SMALL || dCellBedElev == -9999.0 ) ucDryCount++;
	if ( pNeigDataN.x - dNeigBedElevN < VERY_SMALL || dNeigBedElevN == -9999.0 ) ucDryCount++;
	if ( pNeigDataE.x - dNeigBedElevE < VERY_SMALL || dNeigBedElevE == -9999.0 ) ucDryCount++;
	if ( pNeigDataW.x - dNeigBedElevW < VERY_SMALL || dNeigBedElevW == -9999.0 ) ucDryCount++;
	if ( pNeigDataS.x - dNeigBedElevS < VERY_SMALL || dNeigBedElevS == -9999.0 ) ucDryCount++;

	// All neighbours are dry? Don't bother calculating
	if ( ucDryCount == 5 ){
		return;
	}

	bool debug = false;


	if (!usePoleniN){
		dDischarge[ DOMAIN_DIR_N ] = calculateInertialFlux(
			dManningCoef,
			dLclTimestep,
			pNeigDataN.w,
			pNeigDataN.x,
			dNeigBedElevN,
			pCellData.x,
			dCellBedElev
		);
				}else{
					dDischarge[ DOMAIN_DIR_N ] = poleni_Solver(
						dLclTimestep,
						dManningCoef,
						pNeigManN,
						pCellData.x,
						pNeigDataN.x,
						dCellBedElev,
						dNeigBedElevN,
						dOpt_zymax,
						dOpt_cy,
						debug
					);
				}
	if (!usePoleniE){
		dDischarge[ DOMAIN_DIR_E ] = calculateInertialFlux(
			dManningCoef,
			dLclTimestep,
			pNeigDataE.z,
			pNeigDataE.x,
			dNeigBedElevE,
			pCellData.x,
			dCellBedElev
		);
				}else{
					dDischarge[ DOMAIN_DIR_E ] = poleni_Solver(
						dLclTimestep,
						dManningCoef,
						pNeigManE,
						pCellData.x,
						pNeigDataE.x,
						dCellBedElev,
						dNeigBedElevE,
						dOpt_zxmax,
						dOpt_cx,
						debug
					);
				}
	if (!usePoleniS){
		dDischarge[ DOMAIN_DIR_S ] = calculateInertialFlux(
			dManningCoef,
			dLclTimestep,
			pCellData.w,
			pCellData.x,
			dCellBedElev,
			pNeigDataS.x,
			dNeigBedElevS
		);
				}else{
					dDischarge[ DOMAIN_DIR_S ] = -1.0*poleni_Solver(
						dLclTimestep,
						dManningCoef,
						pNeigManS,
						pCellData.x,
						pNeigDataS.x,
						dCellBedElev,
						dNeigBedElevS,
						dOpt_znymax,
						dOpt_cny,
						debug
					);
				}
	if (!usePoleniW){
		dDischarge[ DOMAIN_DIR_W ] = calculateInertialFlux(
			dManningCoef,
			dLclTimestep,
			pCellData.z,
			pCellData.x,
			dCellBedElev,
			pNeigDataW.x,
			dNeigBedElevW
		);
				}else{
					dDischarge[ DOMAIN_DIR_W ] = -1.0*poleni_Solver(
						dLclTimestep,
						dManningCoef,
						pNeigManW,
						pCellData.x,
						pNeigDataW.x,
						dCellBedElev,
						dNeigBedElevW,
						dOpt_znxmax,
						dOpt_cnx,
						debug
					);
				}
	

	if(lIdxX >= DOMAIN_COLS - 1 || dNeigBedElevE == -9999.0){
		dDischarge[DOMAIN_DIR_E] = 0.0;
	} 
	if( lIdxY >= DOMAIN_ROWS - 1 || dNeigBedElevN == -9999.0) {
		dDischarge[DOMAIN_DIR_N] = 0.0;
	}
	if( lIdxX <= 0 || dNeigBedElevW == -9999.0) {
		dDischarge[DOMAIN_DIR_W] = 0.0;
	}
	if( lIdxY <= 0 || dNeigBedElevS == -9999.0) {
		dDischarge[DOMAIN_DIR_S] = 0.0;
	}

	

	pCellData.z		= dDischarge[DOMAIN_DIR_W];
	pCellData.w		= dDischarge[DOMAIN_DIR_S];

	// Calculation of change values per timestep and spatial dimension
	dDeltaFSL		= ( dDischarge[DOMAIN_DIR_E] - dDischarge[DOMAIN_DIR_W] + 
					    dDischarge[DOMAIN_DIR_N] - dDischarge[DOMAIN_DIR_S] )/DOMAIN_DELTAY;

	// Update the flow state
	pCellData.x		= pCellData.x + dLclTimestep * dDeltaFSL;

	// New max FSL?
	if ( pCellData.x > pCellData.y )
		pCellData.y = pCellData.x;

	// Crazy low depths?
	if ( pCellData.x - dCellBedElev < VERY_SMALL )
		pCellData.x = dCellBedElev;
	
	//if (ulIdx == 7116 ){
	//	printf("opt_z %f opt_s %f ",dCellBedElev, pCellData.x);
	//	//printf("opt_h %f", (pCellData.x-dCellBedElev));
	//	printf("pN %f pE %f pS %f pW %f ",usePoleniN ? 1.0 : 0.0, usePoleniE ? 1.0 : 0.0, usePoleniS ? 1.0 : 0.0, usePoleniW ? 1.0 : 0.0);
	//	printf("dOpt_zxmax %f dOpt_cx %f dOpt_zymax %f dOpt_cy %f ",dOpt_zxmax, dOpt_cx, dOpt_zymax, dOpt_cy);
	//	printf("N %f E %f S %f W %f", pNeigDataN.x,pNeigDataE.x,pNeigDataS.x,pNeigDataW.x);
	//	printf("dN %f dE %f dS %f dW %f", dDischarge[ DOMAIN_DIR_N ],dDischarge[ DOMAIN_DIR_E ],dDischarge[ DOMAIN_DIR_S ],dDischarge[ DOMAIN_DIR_W ]);
	//	//printf("Cell.x %f cell.z %f cell.w %f", pCellData.x, pCellData.z, pCellData.w);
	//	printf("\n");
	//}

	// Commit to global memory
	pCellStateDst[ ulIdx ] = pCellData;
}

/*
 *  Calculate the flux using an inertial approximation in terms of volumetric discharge per unit width
 */
cl_double calculateInertialFlux(
		cl_double		dManningCoef,					// Manning coefficient
		cl_double		dTimestep,						// Timestep
		cl_double		dPreviousDischarge,				// Last current discharge
		cl_double		dLevelUpstream,					// Upstream current level
		cl_double		dBedUpstream,					// Upstream bed elevation
		cl_double		dLevelDownstream,				// Downstream current level
		cl_double		dBedDownstream					// Downstream bed elevation
)
{
	cl_double dDischarge = 0.0;
	cl_double dDepth	 = fmax( dLevelDownstream, dLevelUpstream ) - max( dBedUpstream, dBedDownstream );
	cl_double dSlope	 = ( dLevelDownstream - dLevelUpstream ) / DOMAIN_DELTAX;

	// Inertial 
	dDischarge = ( dPreviousDischarge - ( GRAVITY * dDepth * dTimestep * dSlope ) ) /
			     ( 1.0 + GRAVITY * dDepth * dTimestep * dManningCoef * dManningCoef * fabs( dPreviousDischarge ) /
				   pow( dDepth, 10.0/3.0 ) );

	//Promaides
	//cl_double dDischarge2 = 0.0;
	//cl_double delta_h    = dLevelUpstream - dLevelDownstream;
	//cl_double abs_delta_h	= fabs(delta_h);
	//dDischarge2 = 1.0/dManningCoef * pow(dDepth,5.0/3.0) * delta_h / pow(DOMAIN_DELTAX * abs_delta_h,0.5);
	//printf("Inertail: %f Promaides: %f\n", dDischarge*1000000.0,dDischarge2*1000000.0);

	// Froude number discharge limiter 
	// This is not discussed anywhere, why?
	//if ( dDischarge > 0.0 &&
	//	 ( ( fabs( dDischarge ) / dDepth ) / sqrt( GRAVITY * dDepth ) ) > FROUDE_LIMIT )
	//	dDischarge = dDepth * sqrt( GRAVITY * dDepth ) * FROUDE_LIMIT;
	//if ( dDischarge < 0.0 &&
	//	 ( ( fabs( dDischarge ) / dDepth ) / sqrt( GRAVITY * dDepth ) ) > FROUDE_LIMIT )
	//	dDischarge = 0.0 - dDepth * sqrt( GRAVITY * dDepth ) * FROUDE_LIMIT;

	// Bates(2010):
	//cl_double Q = dDischarge;
	//dDischarge = fmin(fabs(Q), (cl_double)(DOMAIN_DELTAY)* fabs(dLevelDownstream-dLevelUpstream)/(4*dTimestep));
	//
	//if (Q<0.0){
	//	dDischarge = dDischarge * (-1.0);
	//}



	// Some completely arbitrary other limiter?!
	// This is used in CAESAR-LISFLOOD but I can't for the life of me work out the logic behind it...

	//if ( dDischarge > 0.0 && ( fabs( dDischarge ) * dTimestep / (cl_double)(DOMAIN_DELTAX) ) > ( dLevelUpstream - dBedUpstream ) / 4.0 )
	//	dDischarge = ( ( dLevelUpstream - dBedUpstream ) * (cl_double)(DOMAIN_DELTAX) ) / 5.0 / dTimestep;
	//if ( dDischarge < 0.0 &&( fabs( dDischarge ) * dTimestep / (cl_double)(DOMAIN_DELTAX) ) > ( dLevelDownstream - dBedDownstream ) / 4.0 )
	//	dDischarge = 0.0 - ( ( dLevelDownstream - dBedDownstream ) * (cl_double)(DOMAIN_DELTAX) ) / 5.0 / dTimestep;
	
	//Best
	// 98.00
	// diff/40.0, 90/100

	//cl_double percAdd = 0.0;
	//cl_double percentage = 98.00;
	//percentage = 100.0;

	// Alaa: 20 was good
	// Alaa: Should this be 10.0 instead of 20.0??????
	//
	//if( fabs(dDischarge) > (cl_double)(DOMAIN_DELTAY)* fabs(dLevelDownstream-dLevelUpstream)/(4.0*dTimestep)){
	//	cl_double Q = dDischarge;
	//	cl_double sug = (cl_double)(DOMAIN_DELTAY)* fabs(dLevelDownstream-dLevelUpstream)/(4.0*dTimestep);
	//	cl_double diff = fabs(dDischarge) - sug;
	//	percAdd = fmin(diff/40.0, 90.0/100.0);
	//	dDischarge = fabs(Q)*(percentage/100.0-percAdd)+sug*((1.0-percentage/100.0)+percAdd);
	//	if (Q<0.0)
	//		dDischarge = dDischarge * (-1.0);
	//}

	// The Best so far:
	// <0.01 is /40.0   else  /320

	cl_double percAdd = 0.0;
	if( fabs(dDischarge) > (cl_double)(DOMAIN_DELTAY)* fabs(dLevelDownstream-dLevelUpstream)/(4.0*dTimestep)){
		cl_double Q = dDischarge;
		cl_double sug = (cl_double)(DOMAIN_DELTAY)* fabs(dLevelDownstream-dLevelUpstream)/(4.0*dTimestep);
		cl_double diff = fabs(dDischarge) - sug;
		cl_double diffp = diff/fabs(dDischarge);

	
		if(fabs(dDischarge) < 0.01){
			percAdd =diffp*diffp/40.0; // decrease the denominator to make bates stronger at low discharges, 10 was bad
		}else{
			percAdd = diffp*diffp/320.0; // we also need bates at high discharges but to a lesser degree
		}

		dDischarge = fabs(Q)*(1.0-percAdd)+sug*(percAdd);
		if (Q<0.0)
			dDischarge = dDischarge * (-1.0);
	}

	if ( dDepth < VERY_SMALL )
		dDischarge = 0.0;

	// Done...
	return dDischarge;
}

cl_double poleni_Solver(
	cl_double timestep,		// Current Time-step
	cl_double manning,     	// Manning of Main Cell
	cl_double manning_Neig,	// Manning of Neighbor cell
	cl_double opt_s_Cell,	// Water surface level of Main Cell
	cl_double opt_s_Neig,	// Water surface level of Neighbor cell
	cl_double opt_z_Cell, 	// Bed Elevation of main Cell
	cl_double opt_z_Neig,	// Bed Elevation of Neighbor Cell

	cl_double opt_zxymax,
	cl_double opt_cxy,

	bool debug				// Debug Flag
	)
	{

		//printf("Poleni Error \n");	
		cl_double dDepth	 = fmax( opt_s_Cell, opt_s_Neig ) - max( opt_z_Cell, opt_z_Neig );

		cl_double output;
		cl_double dDischarge = 0.0;

		cl_double flow_depth	= opt_s_Cell - opt_zxymax;
		cl_double flow_depth_neigh	=  opt_s_Neig - opt_zxymax;
		cl_double reduction_term;
		

		//noFlow
		if((flow_depth<=0.0 && flow_depth_neigh<=0.0) || (fabs(flow_depth-flow_depth_neigh)<=0.0)){
			dDischarge = 0.0;
		}else{
			//flow out of this element without submerged weirflow reduction into the neihgbouring element
			if( flow_depth > 0.0 && flow_depth_neigh <= 0.0){				
				dDischarge = -1.0 * Cfacweir * opt_cxy * pow(flow_depth, (3.0/2.0)) ;
		
			//flow out of the neighbouring element without submerged weirflow reduction into this element
			}else if(flow_depth <= 0.0 && flow_depth_neigh > 0.0){					
				dDischarge = Cfacweir * opt_cxy * pow(flow_depth_neigh,(3.0/2.0));

			//submerged weirflow with reduction
			}else if(flow_depth > 0.0 && flow_depth_neigh > 0.0){	
				if(flow_depth > flow_depth_neigh){							//flow into the neihgbouring element	
					reduction_term = (1.0-flow_depth_neigh/flow_depth);		//reduction of the discharge (submerged weirflow)
					if(reduction_term <= 0.000463529){						//replace the ^(1/3) by a fitted arctan-function; at the boundary they have the same values
						dDischarge = -1.0 * Cfacweir * opt_cxy * pow(flow_depth,(3.0/2.0)) * 0.057965266895 * atan(8984.365582471040 * reduction_term);
					}else{
						dDischarge = -1.0 * Cfacweir * opt_cxy * pow(flow_depth,(3.0/2.0)) * pow(reduction_term,(1.0/3.0));
					}
				}
				else{	
					//flow into this element
					reduction_term = (1.0 - flow_depth/flow_depth_neigh);	//reduction of the discharge (submerged weirflow)
					if(reduction_term <= 0.000463529){						//replace the ^(1/3) by a fitted arctan-function; at the boundary they have the same values
						dDischarge = Cfacweir * opt_cxy * pow(flow_depth_neigh,(3.0/2.0)) * 0.057965266895 * atan(8984.365582471040 * reduction_term);
					}else{
						dDischarge = Cfacweir * opt_cxy * pow(flow_depth_neigh,(3.0/2.0)) * pow(reduction_term,(1.0/3.0));
					}
				}
			}
		}

		dDischarge = dDischarge * DOMAIN_DELTAY;
		
		//if ( dDischarge > 0.0 && ( ( fabs( dDischarge ) / dDepth ) / sqrt( GRAVITY * dDepth ) ) > FROUDE_LIMIT ){
		//	dDischarge = dDepth * sqrt( GRAVITY * dDepth ) * FROUDE_LIMIT;
		//	printf("Limiter active \n");
		//}
		//if ( dDischarge < 0.0 && ( ( fabs( dDischarge ) / dDepth ) / sqrt( GRAVITY * dDepth ) ) > FROUDE_LIMIT ){
		//	dDischarge = 0.0 - dDepth * sqrt( GRAVITY * dDepth ) * FROUDE_LIMIT;
		//	printf("Limiter active \n");
		//}

		return dDischarge;
	}